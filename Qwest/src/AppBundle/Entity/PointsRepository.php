<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * PointsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointsRepository extends EntityRepository
{
    public function findPointsByExerciceAndUser($id)
    {
        $session = new Session();
        $utilisateurId = $session->get("id");
        
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("p")
            ->from($this->_entityName, "p")
            ->leftJoin("p.utilisateur", "u")
            ->where("u.id = :utilisateurId")
                ->setParameter("utilisateurId", $utilisateurId)
            ->leftJoin("p.exercice", "e")
            ->andWhere("e.id = :exerciceId")
                ->setParameter("exerciceId", $id)
            ->orderBy("p.id")
        ;
        
        $query = $queryBuilder->getQuery();
        $resultat = $query->getResult();
        
        return $resultat;
    }
    
    public function countTotalPoints($id)
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("SUM(p.points)")
            ->from($this->_entityName, "p")
            ->leftJoin("p.utilisateur", "u")
            ->where("u.id = :id")
                ->setParameter("id", $id)
        ;
        
        $query = $queryBuilder->getQuery();
        $resultat = intval($query->getResult()[0][1]);
        
        return $resultat;
    }

    public function countPointsHonneur($id)
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("p")
            ->from($this->_entityName, "p")
            ->leftJoin("p.utilisateur", "u")
            ->where("u.id = :id")
                ->setParameter("id", $id)
        ;

        $points = $queryBuilder->getQuery()->getResult();

        $pointHonneur = 0;

        foreach($points as $pointBoucle){
            $pointHonneur += ($pointBoucle->getPoints() < 50) ? 0 : $pointBoucle->getPoints() - 50;
        }

        if(!isset($pointHonneur))
        {
            return 0;
        }

        return $pointHonneur;
    }

    public function countTotalExercice($id)
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("count(p.id)")
            ->from($this->_entityName, "p")
            ->leftJoin("p.utilisateur", "u")
            ->where("u.id = :id")
                ->setParameter("id", $id)
        ;

        $resultat = intval($queryBuilder->getQuery()->getResult()[0][1]);
        return $resultat;
    }
    
    public function countScoreByExercice($id)
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("p")
            ->from($this->_entityName, "p")
            ->where("p.exercice = :id")
                ->setParameter("id", $id)
            ->orderBy("p.points", "DESC")
        ;

        $points = $queryBuilder->getQuery()->getResult();

        $score = 0;
        $nbScores100 = 0;
        $moyenne = 0;
        $mediane = 0;
        $i = 0;
        
        $nbResultats = count($points);
        
        if($nbResultats  === 1){
            $nombreMediane = 1;
        }
        else if(($nbResultats % 2) === 0){
            $nombreMediane = $nbResultats / 2;
        }
        else{
            $nombreMedianeBas = floor($nbResultats / 2);
            $nombreMedianeHaut = ceil($nbResultats / 2);
            $t = true;
        }
        
        foreach($points as $pointBoucle){
            $score += ($pointBoucle->getPoints() < 50) ? 0 : $pointBoucle->getPoints() - 50;
            
            if(isset($nombreMediane) && $i === $nombreMediane){
                $mediane = ($pointBoucle->getPoints() < 50) ? 0 : $pointBoucle->getPoints() - 50;
            }
            
            if(isset($nombreMedianeBas) && $i == $nombreMedianeBas){
                $medianeBas = ($pointBoucle->getPoints() < 50) ? 0 : $pointBoucle->getPoints() - 50;
            }
            
            else if(isset($nombreMedianeHaut) && $i == $nombreMedianeHaut){
                $medianeHaut = ($pointBoucle->getPoints() < 50) ? 0 : $pointBoucle->getPoints() - 50;
            }
            
            if($pointBoucle->getPoints() === 100){
                $nbScores100++;
            }
            
            $i++;
        }

        if($i !== 0){
            $moyenne = round($score / $i);
        }
        
        if(isset($medianeBas) && isset($medianeHaut)){
            $mediane = round(($medianeBas + $medianeHaut) / 2);
        }
        
        return array("nbScores" => $i, "total" => $score, "moyenne" => $moyenne, "mediane" => $mediane, "nbScores100" => $nbScores100);
    }
    
    public function countExercices1semaine()
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("count(p.id)")
            ->from($this->_entityName, "p")
            ->leftJoin("p.utilisateur", "u")
            ->where(':dateRecente <= p.dateCreation')
                ->setParameter(':dateRecente', new \DateTime('-1 week'))
        ;

        $query = $queryBuilder->getQuery()->getResult();
        
        return $query[0][1];
    }
    
    public function countPointsDHonneur1semaine()
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("p")
            ->from($this->_entityName, "p")
            ->leftJoin("p.utilisateur", "u")
            ->where(':dateRecente <= p.dateCreation')
                ->setParameter(':dateRecente', new \DateTime('-1 week'))
        ;
        
        $points = $queryBuilder->getQuery()->getResult();
        
        $pointHonneur = 0;

        foreach($points as $pointBoucle){
            $pointHonneur += ($pointBoucle->getPoints() < 50) ? 0 : $pointBoucle->getPoints() - 50;
        }

        if(!isset($pointHonneur))
        {
            return 0;
        }

        return $pointHonneur;
    }
    
    public function findListeExercicesRealises(){
        $listeClasse = array("Toute catégories", "Seconde", "Première G", "Première ST", "Terminale", "Autres");
        $listeDate = array("-1 day", "-7 day", "-1 month", "-1 year", "total");
        
        $i = 0;
        
        
        foreach($listeDate as $date){
            foreach($listeClasse as $classe){
                $qb = $this->_em->createQueryBuilder()
                    ->select("count(p.id)")
                    ->from($this->_entityName, "p")
                    ->leftJoin("p.utilisateur", "u")
                    ->where('u.permission = :p')
                        ->setParameter('p', "U")
                ;
                
                if($classe !== "Autres" && $classe !== "Toute catégories"){
                    $qb->leftJoin("u.classeGroupe", "cG")
                        ->leftJoin("cG.niveau", "n")
                        ->andWhere('n.nom = :classe')
                            ->setParameter('classe', $classe)
                    ;
                }
                
                else if($classe === "Autres"){
                    $qb->leftJoin("u.classeGroupe", "cG")
                        ->leftJoin("cG.niveau", "n")
                        ->andWhere('n.nom = :classe')
                            ->setParameter('classe', "Lycée")
                        ->orWhere('n.nom = :classe')
                            ->setParameter('classe', "Collège")
                    ;
                }
                    
                if($date !== "total"){
                    $qb->andWhere('p.dateCreation > :dateCreation')
                        ->setParameter(':dateCreation', new \DateTime($date))
                    ;
                }
                
                $tableauExercicesRealises[$i][$classe] = $qb->getQuery()->getResult()[0][1];
            }
            
            $i++;
        }
        
//        var_dump($tableauExercicesRealises);
//        die;
        return $tableauExercicesRealises;
    }
}
