<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Config\Definition\Exception\Exception;
use AppBundle\Entity\Points;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findNumberOfUser()
    {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->select("count(u.id)")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
        ;

        $query = $QueryBuilder->getQuery();
        return $query->getSingleScalarResult();
    }
    
    public function findNumberOfUserNonActualise()
    {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->select("count(u.id)")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
            ->andWhere('u.derniereActualisation IS NULL')
        ;

        $query = $QueryBuilder->getQuery();
        return $query->getSingleScalarResult();
    }

    public function findNumberOfRecent1DayUser()
    {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->select("count(u.id)")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
            ->andWhere(':dateRecente <= u.dateConnection')
                ->setParameter(':dateRecente', new \DateTime('-1 day'))
        ;

        $query = $QueryBuilder->getQuery();
        return $query->getSingleScalarResult();
    }

    public function findNumberOfRecent1HourUser()
    {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->select("count(u.id)")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
            ->andWhere(':dateRecente <= u.dateConnection')
                ->setParameter(':dateRecente', new \DateTime('-1 hour'))
        ;

        $query = $QueryBuilder->getQuery();
        return $query->getSingleScalarResult();
    }

    public function findNumberOfRecent1WeekUser()
    {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->select("count(u.id)")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
            ->andWhere(':dateRecente <= u.dateConnection')
                ->setParameter(':dateRecente', new \DateTime('-1 week'))
        ;

        $query = $QueryBuilder->getQuery();
        return $query->getSingleScalarResult();
    }

    public function findUserForBoard()
    {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->select("u")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
            ->leftJoin("u.classeGroupe", "cG")
            ->orderBy('cG.niveau')
            ->addOrderBy('cG.nom')
            ->addOrderBy('u.pointsHonneur', "DESC")
        ;

        $query = $QueryBuilder->getQuery();
        return $query->getResult();
    }

    public function findUserForHonneurBoard($niveau = null)
    {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->select("u")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
            ->andWhere("u.nombreExercices > 0")
            ->orderBy('u.pointsHonneur', "DESC")
            ->addOrderBy('u.totalPoints', "DESC")
            ->addOrderBy('u.nombreExercices', "DESC")
            ->setMaxResults(50)
        ;
        
        if($niveau !== null){
            $QueryBuilder
                ->leftJoin("u.classeGroupe", "cG")
                ->leftJoin("cG.niveau", "n")
                ->andWhere("n.id = :niveau")
                    ->setParameter('niveau', $niveau->getId())
            ;
        }
        

        $query = $QueryBuilder->getQuery();
        return $query->getResult();
    }

    public function actualisationTotalPoints()
    {
        $repositoryPoints = $this->getEntityManager()->getRepository(Points::class);
        $em = $this->getEntityManager();

        $qb = $this->_em->createQueryBuilder()
        ->select("u")
        ->from($this->_entityName, "u")
        ->where('u.permission = :p')
            ->setParameter('p', "U")
        ;

        $query = $qb->getQuery()->getResult();

        foreach($query as $user)
        {
            $q = $this->createQueryBuilder("u")
                ->update("AppBundle\Entity\User", 'u')
                ->set('u.totalPoints', '?1')
                ->set('u.nombreExercices', '?2')
                ->set('u.pointsHonneur', '?3')
                ->set('u.derniereActualisation', '?4')
                ->where('u.id = ?5')
                ->setParameter(1, $repositoryPoints->countTotalPoints($user->getId()))
                ->setParameter(2, $repositoryPoints->countTotalExercice($user->getId()))
                ->setParameter(3, $repositoryPoints->countPointsHonneur($user->getId()))
                ->setParameter(4, new \Datetime())
                ->setParameter(5,  $user->getId())
                ->getQuery();
            $q->execute();

            $em->persist($user);
        }

        $em->flush();

    }

    public function findUserMoins6Heures()
    {
        $qb = $this->_em->createQueryBuilder()
            ->select("u")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
            ->andWhere('u.derniereActualisation IS NOT NULL')
            ->andWhere('u.derniereActualisation < :dateLimite')
                ->setParameter(':dateLimite', new \DateTime('-6 hour'))
        ;

        return $qb->getQuery()->getResult();
    }
    
    public function findUserPosition($utilisateur, $inNiveau = false)
    {
        $qb = $this->_em->createQueryBuilder()
            ->select("u")
            ->from($this->_entityName, "u")
            ->where('u.permission = :p')
                ->setParameter('p', "U")
            ->orderBy('u.totalPoints', "DESC")
        ;
        
        if($inNiveau === true){
            $qb->leftJoin("u.classeGroupe", "c")
                ->andWhere("c.niveau = :niveau")
                ->setParameter(':niveau', $utilisateur->getClasseGroupe()->getNiveau()->getId())
            ;
        }
        
        $i = 1;
        
        foreach($qb->getQuery()->getResult() as $utilisateurBoucle){
            if($utilisateur->getId() === $utilisateurBoucle->getId()){
                break;
            }
            
            $i++;
        }

        return $i;
    }
    
    public function findListeConnections()
    {
        $listeClasse = array("Toute catégories", "Seconde", "Première G", "Première ST", "Terminale", "Autres");
        $listeDate = array("-1 day", "-7 day", "-1 month", "-1 year", "total");
        
        foreach($listeClasse as $classe){
            foreach($listeDate as $date){
                $qb = $this->_em->createQueryBuilder()
                    ->select("count(u.id)")
                    ->from($this->_entityName, "u")
                    ->where('u.permission = :p')
                        ->setParameter('p', "U")
                ;
                
                if($classe !== "Autres" && $classe !== "Toute catégories"){
                    $qb->leftJoin("u.classeGroupe", "cG")
                        ->leftJoin("cG.niveau", "n")
                        ->andWhere('n.nom = :classe')
                            ->setParameter('classe', $classe)
                    ;
                }
                
                else if($classe === "Autres"){
                    $qb->leftJoin("u.classeGroupe", "cG")
                        ->leftJoin("cG.niveau", "n")
                        ->andWhere('n.nom = :classe')
                            ->setParameter('classe', "Lycée")
                        ->orWhere('n.nom = :classe')
                            ->setParameter('classe', "Collège")
                    ;
                }
                    
                if($date !== "total"){
                    $qb->andWhere('u.dateConnection > :dateConnection')
                        ->setParameter(':dateConnection', new \DateTime($date))
                    ;
                }
                
                $tableauConnections[$date][$classe] = $qb->getQuery()->getResult()[0][1];
            }
        }
        
        return $tableauConnections;
    }
}
