<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;
use AppBundle\Entity\Exercise;
use AppBundle\Entity\Question;
use AppBundle\Entity\Answer;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends EntityRepository
{
    public function findQuestionOrNull($id)
    {
        $QueryBuilder = $this->_em->createQueryBuilder()
            ->select("q")
            ->from($this->_entityName, "q")
            ->where('q.exercice = :id')
                ->setParameter('id', $id)
        ;
        
        $query = $QueryBuilder->getQuery();
        $resultat = $query->getResult();
        
        $iteration = 0;
        
        foreach($resultat as $resultatTemp){
            $iteration++;
        }
        
        if($iteration === 0){
            return null;
        }
        
        else{
            return $resultat;
        }
    }
    
    public function findQuestionOrderByNumeroOrdre($id)
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("q")
            ->from($this->_entityName, "q")
            ->where('q.exercice = :id')
                ->setParameter('id', $id)
            ->orderBy("q.numeroOrdre")
        ;
        
        $query = $queryBuilder->getQuery();
        $resultat = $query->getResult();
        
        return $resultat;
    }
    
    public function findQuestionNumber($id)
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("q")
            ->from($this->_entityName,'q')
            ->where("q.exercice = :id")
            ->setParameter("id", $id);

        $compte = $queryBuilder->getQuery()->getResult();
        
        $iteration = 0;
        foreach($compte as $compteBoucle){
            $iteration++;
        }
        
        return $iteration;
    }
    
    public function findQuestionNumberByGroup($id)
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("q")
            ->from($this->_entityName,'q')
            ->where("q.groupe = :id")
            ->setParameter("id", $id)
        ;
        
        $compte = $queryBuilder->getQuery()->getResult();
        
        $iteration = 0;
        foreach($compte as $compteBoucle){
            $iteration++;
        }
        
        return $iteration;
    }
    
    public function countPageByExercise($id)
    {
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("q")
            ->from($this->_entityName,'q')
            ->where("q.exercice = :id")
            ->setParameter("id", $id)
        ;

        $questions = $queryBuilder->getQuery()->getResult();
        
        $nombreQuestion = 0;
        $tableauGroupe = array();
        
        foreach($questions as $questionBoucle){
            if($questionBoucle->getType()->getNom() === "Question Ã  trou" || $questionBoucle->getType()->getNom() === "Quizz" || $questionBoucle->getType()->getNom() === "Ouverte")
            {
                $nombreQuestion++;
            }
            
            elseif($questionBoucle->getGroupe() !== null && !in_array($questionBoucle->getGroupe()->getId(), $tableauGroupe)){
                $nombreQuestion++;
                array_push($tableauGroupe, $questionBoucle->getGroupe()->getId());
            }
        }
        
        return $nombreQuestion;
    }
    
    public function findQuestionBySuperiorNumeroOrdre($id, $num)
    {
        $em = $this->getEntityManager();
        
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select("q")
            ->from($this->_entityName,'q')
            ->where("q.exercice = :id")
                ->setParameter("id", $id)
            ->andWhere("q.numeroOrdre >= :numero")
                ->setParameter("numero", $num)
        ;
        
        $resultat = $queryBuilder->getQuery()->getResult();
        
        
        return $resultat;
    }
}
